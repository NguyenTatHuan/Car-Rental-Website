version: '3.8'

services:
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservice-net

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - microservice-net

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - microservice-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservice-net

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - microservice-net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - microservice-net

  mongodb:
    image: mongo:7
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    volumes:
      - mongodb-data:/data/db
    networks:
      - microservice-net

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - redis
      - rabbitmq
      - user-postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-postgres:5432/Car_Rental_User_Database
    networks:
      - microservice-net

  car-service:
    build: ./car-service
    container_name: car-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - car-postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://car-postgres:5432/Car_Rental_Car_Database
    networks:
      - microservice-net

  booking-service:
    build: ./booking-service
    container_name: booking-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - kafka
      - booking-postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://booking-postgres:5432/Car_Rental_Booking_Database
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - microservice-net

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - microservice-net

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - kafka
      - redis
      - payment-postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://payment-postgres:5432/Car_Rental_Payment_Database
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - microservice-net

  feedback-service:
    build: ./feedback-service
    container_name: feedback-service
    ports:
      - "8086:8086"
    depends_on:
      - eureka-server
      - kafka
      - feedback-postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://feedback-postgres:5432/Car_Rental_Feedback_Database
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - microservice-net

  chat-service:
    build: ./chat-service
    container_name: chat-service
    ports:
      - "8087:8087"
    depends_on:
      - eureka-server
      - rabbitmq
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/Car_Rental_Chat_Database
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - microservice-net

  user-postgres:
    image: postgres:15
    container_name: user-postgres
    environment:
      POSTGRES_DB: Car_Rental_User_Database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - user-postgres-data:/var/lib/postgresql/data
    networks:
      - microservice-net

  car-postgres:
    image: postgres:15
    container_name: car-postgres
    environment:
      POSTGRES_DB: Car_Rental_Car_Database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - car-postgres-data:/var/lib/postgresql/data
    networks:
      - microservice-net

  booking-postgres:
    image: postgres:15
    container_name: booking-postgres
    environment:
      POSTGRES_DB: Car_Rental_Booking_Database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - booking-postgres-data:/var/lib/postgresql/data
    networks:
      - microservice-net

  payment-postgres:
    image: postgres:15
    container_name: payment-postgres
    environment:
      POSTGRES_DB: Car_Rental_Payment_Database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5436:5432"
    volumes:
      - payment-postgres-data:/var/lib/postgresql/data
    networks:
      - microservice-net

  feedback-postgres:
    image: postgres:15
    container_name: feedback-postgres
    environment:
      POSTGRES_DB: Car_Rental_Feedback_Database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5437:5432"
    volumes:
      - feedback-postgres-data:/var/lib/postgresql/data
    networks:
      - microservice-net

volumes:
  redis-data:
  mongodb-data:
  user-postgres-data:
  car-postgres-data:
  booking-postgres-data:
  payment-postgres-data:
  feedback-postgres-data:

networks:
  microservice-net:
    driver: bridge
